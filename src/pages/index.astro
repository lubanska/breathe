---
import Test from "../components/Test.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Breathe Deep">
  <main>
    <div class="flex flex-col items-center gap-4">
      <h1 class="font-800 text-14">Breathe Deep</h1>
      <div class="flex flex-row flex-nowrap gap-2">
        <div id="breatheBox" class="w-20 h-20 bg-green"></div>
      </div>

      <button id="myButton" class="my-10">Breathe</button>

      <div>
        <label for="mySlider">Inhale A</label>
        <input type="range" id="inhale" min="1" max="10" value="1" />
      </div>
      <div>
        <label for="mySlider">Inhale Hold B</label>
        <input type="range" id="inhaleHold" min="1" max="10" value="1" />
      </div>
      <div>
        <label for="mySlider">Exhale C</label>
        <input type="range" id="exhale" min="1" max="10" value="1" />
      </div>
      <div>
        <label for="mySlider">Exhale Hold D</label>
        <input type="range" id="exhaleHold" min="1" max="10" value="1" />
      </div>
    </div>
  </main>
</Layout>

<script>
  const inhale = document.getElementById("inhale");
  const inhaleHold = document.getElementById("inhaleHold");
  const exhale = document.getElementById("exhale");
  const exhaleHold = document.getElementById("exhaleHold");
  const root = document.documentElement;
  const myButton = document.getElementById("myButton");
  const breatheBox = document.getElementById("breatheBox");

  if (myButton) {
    myButton.addEventListener("click", (e) => {
      breatheCycle();
    });
  }

  function breatheCycle() {
    console.log("Cycle started");
    const a = 1000; // Duration for breathe-in
    const b = 2000; // Pause after breathe-in
    const c = 3000; // Duration for breathe-out
    const d = 4000; // Pause after breathe-out

    if (breatheBox) {
      const performBreathing = () => {
        console.log("Breathe in");
        breatheBox.classList.add("breathe-in");

        setTimeout(() => {
          console.log("pause breathe in");
          breatheBox.classList.add("paused");

          setTimeout(() => {
            console.log("breathe out");
            breatheBox.classList.remove("paused");
            breatheBox.classList.remove("breathe-in");
            breatheBox.classList.add("breathe-out");

            setTimeout(() => {
              console.log("pause breathe out");
              breatheBox.classList.add("paused");

              setTimeout(() => {
                console.log("end cycle");

                breatheBox.classList.remove("paused");
                breatheBox.classList.remove("breathe-out");

                setTimeout(performBreathing, 0); // Adjust the delay as needed
              }, d);
            }, c);
          }, b);
        }, a);
      };

      performBreathing();
    }
  }

  if (root) {
    setProperty("A", 1);
    setProperty("B", 1);
    setProperty("C", 1);
    setProperty("D", 1);

    if (inhale) {
      inhale.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;

        if (target) {
          setProperty("A", parseInt(target.value));
        }
      });
    }

    if (inhaleHold) {
      inhaleHold.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;

        if (target) {
          setProperty("B", parseInt(target.value));
        }
      });
    }

    if (exhale) {
      exhale.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;

        if (target) {
          setProperty("C", parseInt(target.value));
        }
      });
    }

    if (exhaleHold) {
      exhaleHold.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;

        if (target) {
          setProperty("D", parseInt(target.value));
        }
      });
    }
  }

  function setProperty(property: string, value: number) {
    root.style.setProperty(`--time${property}`, `${value}s`);
  }
</script>

<style lang="scss">
  .breathe-in {
    animation: breathe 1s ease-in forwards;
    animation-play-state: running;
  }

  .breathe-out {
    animation: breathe 3s ease-in forwards reverse;
    animation-play-state: running;
  }

  .paused {
    animation-play-state: paused;
  }

  @keyframes breathe {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(2);
    }
  }
</style>
