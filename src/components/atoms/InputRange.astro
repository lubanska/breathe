---
interface Props {
  label: string;
  sliderId: string;
}

const { label, sliderId } = Astro.props;
---

<input-slider class="hover:brightness-105">
  <label for={sliderId}>{label}</label>
  <div class="flex gap-4 items-center mt-1px">
    <input
      type="range"
      id={sliderId}
      min="1"
      max="10"
      value="1"
      aria-labelledby={`label-${sliderId}`}
      aria-valuemin="1"
      aria-valuemax="10"
      aria-valuenow="1"
      aria-valuetext="1 seconds"
      role="slider"
    />
    <span id={`value-${sliderId}`} class="w-4" aria-live="polite">1s</span>
  </div>
</input-slider>

<style style="scss">
  input[type="range"] {
    @apply appearance-none h-2 w-full rounded-full  bg-transparent relative cursor-pointer shadow-indigo shadow-[0_0_0_1px] shadow-[0_0_0_1px_inset] outline-none focus-visible:outline-offset-8 focus-visible:outline-indigo;

    &::-webkit-slider-thumb {
      @apply appearance-none bg-indigo w-5 h-5 rounded-full transition-all hover:scale-105 active:scale-100;
    }

    &::-moz-range-thumb {
      @apply appearance-none bg-indigo w-5 h-5 rounded-full transition-all hover:scale-105 active:scale-100;
    }

    &::-ms-thumb {
      @apply appearance-none bg-indigo w-5 h-5 rounded-full transition-all hover:scale-105 active:scale-100;
    }
  }
</style>

<script>
  class InputRange extends HTMLElement {
    connectedCallback() {
      const inputRange = this.querySelector("input") as HTMLInputElement;
      const valueSpan = this.querySelector("span") as HTMLSpanElement;

      inputRange.addEventListener("input", () => {
        const val = (parseInt(inputRange.value) - 1) * 11.11;
        valueSpan.textContent = inputRange.value + "s";
        inputRange.style.background = `linear-gradient(to right, #BFBCDC ${val}%, #fff0 ${val}%)`;
      });
    }
  }
  customElements.define("input-slider", InputRange);
</script>
